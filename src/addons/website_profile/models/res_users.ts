import { _Date, api } from "../../../core";
import { _super, MetaModel, Model } from "../../../core/models";

import {v4} from 'uuid';
import { bool, f, sha256, today, update } from "../../../core/tools";
import { urlEncode } from "../../../core/service/middleware/utils";

const VALIDATION_KARMA_GAIN = 3;

@MetaModel.define()
class Users extends Model {
    static _module = module;
    static _parents = 'res.users';

    SELF_READABLE_FIELDS() {
        return _super(Users, this).SELF_READABLE_FIELDS().concat(['karma']);
    }

    SELF_WRITEABLE_FIELDS() {
        return _super(Users, this).SELF_WRITEABLE_FIELDS().concat([
            'countryId', 'city', 'website', 'websiteDescription', 'websitePublished',
        ]);
    }

    /**
     * Return a token for email validation. This token is valid for the day
        and is a hash based on a (secret) uuid generated by the forum module,
        the userId, the email and currently the day (to be updated if necessary).

     * @param userId 
     * @param email 
     * @returns 
     */
    @api.model()
    async _generateProfileToken(userId, email) {
        const irConfig = await this.env.items('ir.config.parameter').sudo();
        let profileUuid = await irConfig.getParam('website_profile.uuid');
        if (!profileUuid) {
            profileUuid = v4();
            await irConfig.setParam('website_profile.uuid', profileUuid);
        }
        return sha256(f('%s-%s-%s-%s',
            today(),
            profileUuid,
            userId,
            email
        ));
    }

    async _sendProfileValidationEmail(kwargs: {}={}) {
        const email = await this['email'];
        if (!email) {
            return false;
        }
        const token = await this._generateProfileToken(this.id, email);
        const activationTemplate = await this.env.ref('website_profile.validationEmail');
        if (bool(activationTemplate)) {
            const params = {
                'token': token,
                'userId': this.id,
                'email': email
            }
            update(params, kwargs);
            const tokenUrl = await this.getBaseUrl() + f('/profile/validate_email?%s', urlEncode(params));            
            const cr = 
            await this._cr.savepoint(async () => {
                await (await (await activationTemplate.sudo()).withContext({tokenUrl})).sendMail(
                    this.id, {forceSend: true, raiseException: true});
            });
        }
        return true;
    }

    async _processProfileValidationToken(token, email) {
        this.ensureOne();
        const validationToken = await this._generateProfileToken(this.id, email);
        if (token == validationToken && await this['karma'] == 0) {
            return this.write({'karma': VALIDATION_KARMA_GAIN});
        }
        return false;
    }
}