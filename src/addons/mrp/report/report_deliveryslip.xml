<?xml version="1.0" encoding="utf-8"?>
<verp>
    <template id="stockReportDeliveryDocumentInheritMrp" inheritId="stock.reportDeliveryDocument">
        <!-- needs to be set before so elif directly follows if later on -->
        <xpath expr="//t[@name='hasPackages']" position="before">
            <!-- get only the top level kits' (i.e. no subkit) move lines for easier mapping later on + we ignore subkit groupings-->
            <!-- note that move.label uses top level kit's product.template.displayName value instead of product.template.label -->
            <t t-set="hasKits" t-value="await (await o.moveLineIds).filtered(async (l) => bool(await (await l.moveId).bomLineId) &amp;&amp; await (await (await (await l.moveId).bomLineId).bomId).type == 'phantom')"/>
        </xpath>
        <xpath expr="//t[@name='noPackageSection']" position="before">
            <t t-set="hasKits" t-value="await (await o.moveLineIds).filtered(async (l) => bool(await (await l.moveId).bomLineId) &amp;&amp; await (await (await (await l.moveId).bomLineId).bomId).type == 'phantom')"/>
            <t t-if="hasKits">
                <!-- print the products not in a package or kit first -->
                <t t-set="moveLines" t-value="await moveLines.filtered(async (m) => !bool(await (await m.moveId).bomLineId))"/>
            </t>
        </xpath>
        <xpath expr="//t[@name='noPackageMoveLines']" position="inside">
            <t t-call="mrp.stockReportDeliveryKitSections"/>
        </xpath>
        <xpath expr="//t[@name='hasPackages']" position="after">
            <!-- Additional use case: group by kits when no packages exist and then apply use case 1. (serial/lot numbers used/printed) -->
            <t t-elif="bool(hasKits) &amp;&amp; !bool(hasPackages)">
                <t t-call="mrp.stockReportDeliveryKitSections"/>
                <t t-call="mrp.stockReportDeliveryNoKitSection"/>
            </t>
        </xpath>
    </template>

    <template id="stockReportDeliveryKitSections">
        <!-- get all kits-related SML, including subkits and excluding the packaged SML -->
        <t t-set="allKitsMoveLines" t-value="await (await o.moveLineIds).filtered(async (l) => await (await (await (await l.moveId).bomLineId).bomId).type == 'phantom' &amp;&amp; !bool(await l.resultPackageId))"/>
        <!-- do another map to get unique top level kits -->
        <t t-set="boms" t-value="await hasKits.mapped('moveId.bomLineId.bomId')"/>
        <t t-foreach="boms" t-as="bom">
            <!-- Separate product.product from template for variants-->
            <t t-if="bool(await bom.productId)">
                <t t-set="kitProduct" t-value="await bom.productId"/>
            </t>
            <t t-else="">
                <t t-set="kitProduct" t-value="await bom.productTemplateId"/>
            </t>
            <tr t-att-class="'bg-200 font-weight-bold o-line-section'">
                <td colspan="99">
                    <span t-esc="await kitProduct.displayName"/>
                </td>
            </tr>
            <t t-set="kitMoveLines" t-value="await allKitsMoveLines.filtered(async (l) => (await (await (await l.moveId).bomLineId).bomId).eq(bom))"/>
            <t t-if="hasSerialNumber">
                <tr t-foreach="kitMoveLines" t-as="moveLine">
                    <t t-set="description" t-value="await (await moveLine.moveId).descriptionPicking"/>
                    <t t-if="description == await kitProduct.displayName">
                        <t t-set="description" t-value=""/>
                    </t>
                    <t t-call="stock.stockReportDeliveryHasSerialMoveLine"/>
                </tr>
            </t>
            <t t-else="">
                <t t-set="aggregatedLines" t-value="await kitMoveLines._getAggregatedProductQuantities({kitName: await kitProduct.displayName})"/>
                <t t-if="aggregatedLines">
                    <t t-call="stock.stockReportDeliveryAggregatedMoveLines"/>
                </t>
            </t>
        </t>
    </template>

    <!-- No kit section is expected to only be called in no packages case -->
    <template id="stockReportDeliveryNoKitSection">
        <!-- Do another section for kit-less products if they exist -->
        <t t-set="noKitMoveLines" t-value="await (await o.moveLineIds).filtered(async (l) => !bool(await (await l.moveId).bomLineId))"/>
        <t t-if="noKitMoveLines">
            <tr t-att-class="'bg-200 font-weight-bold o-line-section'">
                <td colspan="99">
                    <span>Products not associated with a kit</span>
                </td>
            </tr>
            <t t-if="hasSerialNumber">
                <tr t-foreach="noKitMoveLines" t-as="moveLine">
                    <t t-call="stock.stockReportDeliveryHasSerialMoveLine"/>
                </tr>
            </t>
            <t t-else="">
                <t t-set="aggregatedLines" t-value="await noKitMoveLines._getAggregatedProductQuantities()"/>
                <t t-if="aggregatedLines">
                    <t t-call="stock.stockReportDeliveryAggregatedMoveLines"/>
                </t>
            </t>
        </t>
    </template>
</verp>
